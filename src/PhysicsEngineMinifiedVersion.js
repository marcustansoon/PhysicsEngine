"use strict";const Physics={TickLoopRate:20};function PhysicsEngineTick(){}PhysicsEngineTick.prototype.Start=function(){isNaN(arguments[0])||(Physics.TickLoopRate=arguments[0]),Physics.TicksPerSecond=1/Physics.TickLoopRate*1e3,Object.freeze(Physics),Object.preventExtensions(Physics),console.log("Running Physics Engine Time Tick at rate of "+Physics.TickLoopRate+"milliseconds with "+Physics.TicksPerSecond+" Ticks per second");let e=0,i=0;this.TickInterval=setInterval(()=>{1e6==++e&&(i++,e=0),KinematicEquation(this)},Physics.TickLoopRate),this.GetCurrentTotalTick=function(){return e+1e6*i}};var PhysicsObj=[],PhysicsEngineTick=new PhysicsEngineTick;function RegisterPhysicsObject(){if(null==this.x||null==this.y)throw Error("Must Register Object with existing x and y as part of their properties");this.KinematicVelocityComponent={},this.KinematicAccelerationComponent={},this.KinematicTrackCurrentTick={},this.KinematicTrackEndTick={},this.KinematicComponentName=[],this.KinematicIsComponentRemovableAfterXSeconds={},this.KinematicTrackTotalIncrementX={},this.KinematicTrackTotalIncrementY={},this.KinematicComponentRemoveBoolean={},this.KinematicCurrentVelocityValue={},PhysicsObj[PhysicsObj.length]=this}function KinematicEquation(e){PhysicsObj.forEach(function(e){let i=0,t=0;e.KinematicComponentName.forEach(function(n,c){let o=(PhysicsEngineTick.GetCurrentTotalTick()-e.KinematicTrackCurrentTick[n])/Physics.TicksPerSecond;if(e.KinematicIsComponentRemovableAfterXSeconds[n]&&o>e.KinematicTrackEndTick[n]/Physics.TicksPerSecond||e.KinematicComponentRemoveBoolean[n])console.log("x:"+e.x+" Y:"+e.y),delete e.KinematicVelocityComponent[n],delete e.KinematicAccelerationComponent[n],delete e.KinematicIsComponentRemovableAfterXSeconds[n],delete e.KinematicTrackEndTick[n],delete e.KinematicTrackCurrentTick[n],delete e.KinematicTrackTotalIncrementX[n],delete e.KinematicTrackTotalIncrementY[n],delete e.KinematicCurrentVelocityValue[n],delete e.KinematicComponentRemoveBoolean[n],e.KinematicComponentName.splice(c,1),console.log("Deleted "+n+" Kinematic Component"),console.log(n+" arr size "+e.KinematicComponentName.length);else{let c=e.KinematicVelocityComponent[n].x,a=e.KinematicAccelerationComponent[n].x,s=(i=c*o+.5*a*o*o)-e.KinematicTrackTotalIncrementX[n];e.KinematicTrackTotalIncrementX[n]+=s,e.x+=s,e.KinematicCurrentVelocityValue[n].x=c+a*o,c=e.KinematicVelocityComponent[n].y,a=e.KinematicAccelerationComponent[n].y,s=(t=c*o+.5*a*o*o)-e.KinematicTrackTotalIncrementY[n],e.KinematicTrackTotalIncrementY[n]+=s,e.y-=s,e.KinematicCurrentVelocityValue[n].y=c+a*o}})})}function DegreeToRadians(){return arguments[0]/180*Math.PI}RegisterPhysicsObject.prototype.SetKinematicParameters=function(e,i,t,n,c,o){if("Add"===e&&this.KinematicComponentName.includes(o))throw Error("Kinematic Name Given Already Exists, Add Kinematic Component Fails");if("Change"===e&&!this.KinematicComponentName.includes(o))throw Error("Kinematic Name Given Does not Exists, Change Kinematic Component Fails");if("Add"!=e&&"Change"!=e)throw Error("Kinematic Parameters Given Is Incomplete");"Add"===e?(console.log("Added "+o+" Successfully"),this.KinematicComponentName.push(o)):console.log("Changed "+o+" Successfully"),this.KinematicVelocityComponent[o]={x:i*Math.cos(DegreeToRadians(n)),y:i*Math.sin(DegreeToRadians(n))},this.KinematicAccelerationComponent[o]={x:t*Math.cos(DegreeToRadians(n)),y:t*Math.sin(DegreeToRadians(n))},this.KinematicTrackCurrentTick[o]=PhysicsEngineTick.GetCurrentTotalTick(),this.KinematicTrackTotalIncrementX[o]=0,this.KinematicTrackTotalIncrementY[o]=0,c>0?(this.KinematicTrackEndTick[o]=c*Physics.TicksPerSecond,this.KinematicIsComponentRemovableAfterXSeconds[o]=!0,console.log("With Countdown")):(this.KinematicIsComponentRemovableAfterXSeconds[o]=!1,console.log("Without Countdown")),this.KinematicCurrentVelocityValue[o]={x:0,y:0},this.KinematicComponentRemoveBoolean[o]=!1},RegisterPhysicsObject.prototype.RemoveKinematicParameters=function(e){if(!this.KinematicComponentName.includes(e))throw Error("Kinematic Name Given Does not Exists");console.log("Removing "+e),this.KinematicIsComponentRemovableAfterXSeconds[e]=!0,this.KinematicTrackEndTick[e]=0,this.KinematicComponentRemoveBoolean[e]=!0},RegisterPhysicsObject.prototype.GetInstantaneousVelocity=function(e,i){if(this.KinematicComponentName.includes(e)){if("x"===i||"X"===i)return this.KinematicCurrentVelocityValue[e].x;if("y"===i||"Y"===i)return this.KinematicCurrentVelocityValue[e].y;throw Error("Invalid Return Velocity Parameters")}},RegisterPhysicsObject.prototype.GetInstantaneousDistanceTravelled=function(e,i){if(this.KinematicComponentName.includes(e)){if("x"===i||"X"===i)return this.KinematicTrackTotalIncrementX[e];if("y"===i||"Y"===i)return this.KinematicTrackTotalIncrementY[e];throw Error("Invalid Return Acc Parameters")}},RegisterPhysicsObject.prototype.CheckIfKinematicComponentExists=function(e){return this.KinematicComponentName.includes(e)};
